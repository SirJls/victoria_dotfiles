#compdef youtube-dl ytdl

_youtube-dl() {
  local curcontext="$curcontext" fileopts needarg cur prev
  typeset -A opt_args
  fileopts="--download-archive|-a|--batch-file|--load-info|--cookies|--ffmpeg-location"
  needarg="--default-search|--proxy|--socket-timeout|--source-address|--cn-verification-proxy|--playlist-start|--playlist-end|--playlist-items|--match-title|--reject-title|--max-downloads|--min-filesize|--max-filesize|--date|--datebefore|--dateafter|--min-views|--max-views|--match-filter|--age-limit|--download-archive|-r|--rate-limit|-R|--retries|--buffer-size|--external-downloader|--external-downloader-args|-a|--batch-file|-o|--output|--autonumber-size|--load-info|--cookies|--cache-dir|--encoding|--user-agent|--referer|--add-header|--sleep-interval|-f|--format|--merge-output-format|--sub-format|--sub-lang|-u|--username|-p|--password|-2|--twofactor|--video-password|--audio-format|--audio-quality|--recode-video|--postprocessor-args|--metadata-from-title|--fixup|--ffmpeg-location|--exec|--convert-subtitles"
  cur=$words[CURRENT]
  case $cur in
    :)
      _arguments '*: :(::ytfavorites ::ytrecommended ::ytsubscriptions ::ytwatchlater ::ythistory)'
    ;;
    *)
      prev=$words[CURRENT-1]
      if [[ ${prev} =~ ${fileopts} ]]; then
        _path_files
      elif [[ ${prev} == "--cache-dir" ]]; then
        _path_files -/
      elif [[ ${prev} == "--recode-video" ]]; then
        _arguments '*:format:(mp4 flv ogg webm mkv)'
      elif [[ ${prev} == "--audio-format" ]]; then
        _arguments '*:format:(best aac vorbis mp3 m4a opus wav)'
      elif [[ ${prev} == "--convert-subtitles" ]]; then
        _arguments '*:format:(srt ass vtt)'
      elif [[ ${prev} =~ "-o|--output" ]]; then
        _arguments "*:template:(\
          '%(title)s.%(ext)s' \
          '%(playlist_index)s - %(title)s.%(ext)s' \
          '%(playlist_title)s/%(title)s.%(ext)s' \
          '-' \
          )"
      elif [[ ${prev} == "--proxy" ]]; then
        _arguments "*:url:(${http_proxy})"
      elif [[ ${prev} =~ ${needarg} ]]; then
        _arguments '*:Need argument:'
      else
        _arguments \
          {-h,--help}'[Print this help text and exit]: :' \
          '--version[Print program version and exit}]' \
          {-U,--update}'[Update this program to latest version.]: :' \
          {-i,--ignore-errors}'[Continue on download errors, for example to skip unavailable videos in a playlist]' \
          '--abort-on-error[Abort downloading of further videos (in the playlist or the command line) if an error occurs]' \
          '--dump-user-agent[Display the current browser identification]' \
          '--list-extractors[List all supported extractors]' \
          '--extractor-descriptions[Output descriptions of all supported extractors]' \
          '--force-generic-extractor[Force extraction to use the generic extractor]' \
          '--default-search[Use this prefix for unqualified URLs.]' \
          '--ignore-config[Do not read configuration files.]' \
          '--flat-playlist[Do not extract the videos of a playlist, only list them.]' \
          '--no-color[Do not emit color codes in output]' \
          '--proxy[Use the specified HTTP/HTTPS proxy.  Pass in an empty string (--proxy "") for direct connection]' \
          '--socket-timeout[Time to wait before giving up, in seconds]' \
          '--source-address[Client-side IP address to bind to (experimental)]' \
          {-4,--force-ipv4}'[Make all connections via IPv4 (experimental)]' \
          {-6,--force-ipv6}'[Make all connections via IPv6 (experimental)]' \
          '--cn-verification-proxy[Use this proxy to verify the IP address for some Chinese sites.]' \
          '--playlist-start[Playlist video to start at (default is 1)]' \
          '--playlist-end[Playlist video to end at (default is last)]' \
          '--playlist-items[Playlist video  items  to download.]' \
          '--match-title[Download only matching titles (regex or caseless sub-string)]' \
          '--reject-title[Skip download for matching titles (regex or caseless sub-string)]' \
          '--max-downloads[Abort after downloading NUMBER files]' \
          '--min-filesize[Do not download any videos smaller than SIZE (e.g.  50k or 44.6m)]' \
          '--max-filesize[Do not download any videos larger than SIZE (e.g.  50k or 44.6m)]' \
          '--date[Download only videos uploaded in this date]' \
          '--datebefore[Download only videos uploaded on or before this date (i.e.  inclusive)]' \
          '--dateafter[Download only videos uploaded on or after this date (i.e.  inclusive)]' \
          '--min-views[Do not download any videos with less than COUNT views]' \
          '--max-views[Do not download any videos with more than COUNT views]' \
          '--match-filter[Generic video filter (experimental).]' \
          '--no-playlist[Download only the video, if the URL refers to a video and a playlist.]' \
          '--yes-playlist[Download the playlist, if the URL refers to a video and a playlist.]' \
          '--age-limit[Download only videos suitable for the given age]' \
          '--download-archive[Download only videos not listed in the archive file.]' \
          '--include-ads[Download advertisements as well (experimental)]' \
          {-r,--rate-limit}'[Maximum download rate in bytes per second (e.g.  50K or 4.2M)]' \
          {-R,--retries}'[Number of retries (default is 10), or "infinite".]' \
          '--buffer-size[Size of download buffer (e.g.  1024 or 16K) (default is 1024)]' \
          '--no-resize-buffer[Do not automatically adjust the buffer size.  By default, the buffer size is automatically resized from an initial value of SIZE.]' \
          '--playlist-reverse[Download playlist videos in reverse order]' \
          '--xattr-set-filesize[Set file xattribute ytdl.filesize with expected filesize (experimental)]' \
          '--hls-prefer-native[Use the native HLS downloader instead of ffmpeg (experimental)]' \
          '--external-downloader[Use the specified external downloader.  Currently supports aria2c,axel,curl,httpie,wget]' \
          '--external-downloader-args[Give these arguments to the external downloader]' \
          {-a,--batch-file}'[File containing URLs to download ("-" for stdin)]' \
          '--id[Use only video ID in file name]' \
          {-o,--output}'[Output filename template.]' \
          '--autonumber-size[Specify the number of digits in %(autonumber)s when it is present in output filename template or --auto-number option is given]' \
          '--restrict-filenames[Restrict filenames to only ASCII characters, and avoid "&" and spaces in filenames]' \
          {-A,--auto-number}'[(deprecated; use -o "%(autonumber)s-%(title)s.%(ext)s" ) Number downloaded files starting from 00000]' \
          {-t,--title}'[(deprecated) Use title in file name (default)]' \
          {-l,--literal}'[(deprecated) Alias of --title]' \
          {-w,--no-overwrites}'[Do not overwrite files]' \
          {-c,--continue}'[Force resume of partially downloaded files.  By default, youtube-dl will resume downloads if possible.]' \
          '--no-continue[Do not resume partially downloaded files (restart from beginning)]' \
          '--no-part[Do not use .part files - write directly into output file]' \
          '--no-mtime[Do not use the Last-modified header to set the file modification time]' \
          '--write-description[Write video description to a .description file]' \
          '--write-info-json[Write video metadata to a .info.json file]' \
          '--write-annotations[Write video annotations to a .annotations.xml file]' \
          '--load-info[JSON file containing the video information (created with the "--write-info-json" option)]' \
          '--cookies[File to read cookies from and dump cookie jar in]' \
          '--cache-dir[Location in the filesystem where youtube-dl can store some downloaded information permanently.]' \
          '--no-cache-dir[Disable filesystem caching]' \
          '--rm-cache-dir[Delete all filesystem cache files]' \
          '--write-thumbnail[Write thumbnail image to disk]' \
          '--write-all-thumbnails[Write all thumbnail image formats to disk]' \
          '--list-thumbnails[Simulate and list all available thumbnail formats]' \
          {-q,--quiet}'[Activate quiet mode]' \
          '--no-warnings[Ignore warnings]' \
          {-s,--simulate}'[Do not download the video and do not write anything to disk]' \
          '--skip-download[Do not download the video]' \
          {-g,--get-url}'[Simulate, quiet but print URL]' \
          {-e,--get-title}'[Simulate, quiet but print title]' \
          '--get-id[Simulate, quiet but print id]' \
          '--get-thumbnail[Simulate, quiet but print thumbnail URL]' \
          '--get-description[Simulate, quiet but print video description]' \
          '--get-duration[Simulate, quiet but print video length]' \
          '--get-filename[Simulate, quiet but print output filename]' \
          '--get-format[Simulate, quiet but print output format]' \
          {-j,--dump-json}'[Simulate, quiet but print JSON information.  See --output for a description of available keys.]' \
          {-J,--dump-single-json}'[Simulate, quiet but print JSON information for each command-line argument.]' \
          '--print-json[Be quiet and print the video information as JSON (video is still being downloaded).]' \
          '--newline[Output progress bar as new lines]' \
          '--no-progress[Do not print progress bar]' \
          '--console-title[Display progress in console titlebar]' \
          {-v,--verbose}'[Print various debugging information]' \
          '--dump-pages[Print downloaded pages encoded using base64 to debug problems (very verbose)]' \
          '--write-pages[Write downloaded intermediary pages to files in the current directory to debug problems]' \
          '--print-traffic[Display sent and read HTTP traffic]' \
          {-C,--call-home}'[Contact the youtube-dl server for debugging]' \
          '--no-call-home[Do NOT contact the youtube-dl server for debugging]' \
          '--encoding[Force the specified encoding (experimental)]' \
          '--no-check-certificate[Suppress HTTPS certificate validation]' \
          '--prefer-insecure[Use an unencrypted connection to retrieve information about the video.  (Currently supported only for YouTube)]' \
          '--user-agent[Specify a custom user agent]' \
          '--referer[Specify a custom referer, use if the video access is restricted to one domain]' \
          '--add-header[Specify a custom HTTP header and its value, separated by a colon ":".  You can use this option multiple times]' \
          '--bidi-workaround[Work around terminals that lack bidirectional text support.  Requires bidiv or fribidi executable in PATH]' \
          '--sleep-interval[Number of seconds to sleep before each download.]' \
          {-f,--format}'[Video format code, see the "FORMAT SELECTION" for all the info]' \
          '--all-formats[Download all available video formats]' \
          '--prefer-free-formats[Prefer free video formats unless a specific one is requested]' \
          {-F,--list-formats}'[List all available formats]' \
          '--youtube-skip-dash-manifest[Do not download the DASH manifests and related data on YouTube videos]' \
          '--merge-output-format[If  a  merge  is required  (e.g.  bestvideo+bestaudio), output to given container format.]' \
          '--write-sub[Write subtitle file]' \
          '--write-auto-sub[Write automatic subtitle file (YouTube only)]' \
          '--all-subs[Download all the available subtitles of the video]' \
          '--list-subs[List all available subtitles for the video]' \
          '--sub-format[Subtitle format, accepts formats preference, for example: "srt" or "ass/srt/best"]' \
          '--sub-lang[Languages of the subtitles to download (optional) separated by commas, use IETF language tags like "en,pt"]' \
          {-u,--username}'[Login with this account ID]' \
          {-p,--password}'[Account password.  If this option is left out, youtube-dl will ask interactively.]' \
          {-2,--twofactor}'[Two-factor auth code]' \
          {-n,--netrc}'[Use .netrc authentication data]' \
          '--video-password[Video password (vimeo, smotri, youku)]' \
          {-x,--extract-audio}'[Convert video files to audio-only files (requires ffmpeg or avconv and ffprobe or avprobe)]' \
          '--audio-format[Specify audio format: "best", "aac", "vorbis", "mp3", "m4a", "opus", or "wav"; "best" by default]' \
          '--audio-quality[Specify ffmpeg/avconv audio quality, insert a value between 0 (better) and 9 (worse) for VBR or a specific bitrate like 128K (default 5)]' \
          '--recode-video[Encode the video to another format if necessary (currently supported: mp4|flv|ogg|webm|mkv|avi)]' \
          '--postprocessor-args[Give these arguments to the postprocessor]' \
          {-k,--keep-video}'[Keep the video file on disk after the post- processing; the video is erased by default]' \
          '--no-post-overwrites[Do not overwrite post-processed files; the post-processed files are overwritten by default]' \
          '--embed-subs[Embed subtitles in the video (only for mkv and mp4 videos)]' \
          '--embed-thumbnail[Embed thumbnail in the audio as cover art]' \
          '--add-metadata[Write metadata to the video file]' \
          '--metadata-from-title[Parse additional metadata like song title / artist from the video title.]' \
          '--xattrs[Write metadata to the video files xattrs (using dublin core and xdg standards)]' \
          '--fixup[Automatically correct known faults of the file.]' \
          '--prefer-avconv[Prefer avconv over ffmpeg for running the postprocessors (default)]' \
          '--prefer-ffmpeg[Prefer ffmpeg over avconv for running the postprocessors]' \
          '--ffmpeg-location[Location of the ffmpeg/avconv binary; either the path to the binary or its containing directory.]' \
          '--exec[Execute a command on the file after downloading, similar to finds -exec syntax.]' \
          '--convert-subtitles[Convert the subtitles to other format (currently supported: srt|ass|vtt)]'
      fi
    ;;
  esac
  return 0
}
